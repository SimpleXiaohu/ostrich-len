(define-funs-rec ((addslashes  ((x String) (y String)) Bool)
                  (as1  ((x String) (y String)) Bool)
                  (as2  ((x String) (y String)) Bool)
                  (as3  ((x String) (y String)) Bool)
                  (as4  ((x String) (y String)) Bool)) (

                  ; definition of addslashes
                  (or (and (= x "") (= y ""))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 92)) ; '\'
                           (= (str.head y) (char.from-int 92)) ; '\'
                           (as1 (str.tail x) (str.tail y))))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 34)) ; '"'
                           (= (str.head y) (char.from-int 92)) ; '\'
                           (as2 (str.tail x) (str.tail y))))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 39)) ; '\''
                           (= (str.head y) (char.from-int 92)) ; '\'
                           (as3 (str.tail x) (str.tail y))))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 0 )) ; '\x00'
                           (= (str.head y) (char.from-int 92)) ; '\'
                           (as4 (str.tail x) (str.tail y))))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (str.head y))            ; x <=> y
                           (and (not (= (str.head x) (char.from-int 39 )))  ; '\''
                                (not (= (str.head x) (char.from-int 34 )))  ; '"'
                                (not (= (str.head x) (char.from-int 92 )))  ; '\'
                                (not (= (str.head x) (char.from-int 0  )))) ; '\x00'
                           (addslashes (str.tail x) (str.tail y)))))

                  ; definition of as1
                  (and (not (= y ""))
                  (and (= (str.head y) (char.from-int 92))  ; '\'
                       (addslashes x (str.tail y))))

                  ; definition of as2
                  (and (not (= y ""))
                  (and (= (str.head y) (char.from-int 34)) ; '"'
                       (addslashes x (str.tail y))))

                  ; definition of as3
                  (and (not (= y ""))
                  (and (= (str.head y) (char.from-int 39)) ; '\''
                       (addslashes x (str.tail y))))

                  ; definition of as4
                  (and (not (= y ""))
                  (and (= (str.head y) (char.from-int 0 )) ; '\x00'
                       (addslashes x (str.tail y))))
                  )
)
(define-fun-rec toLower ((x String) (y String)) Bool
  (or (and (= x "") (= y ""))
      (and (not (= x "")) (not (= y ""))
           (= (char.code (str.head y))
              (ite (and (<= 65 (char.code (str.head x)))   ; 'A'
                        (<= (char.code (str.head x)) 90)) ; 'Z'
                   (+ (char.code (str.head x)) 32)         ; 'A' -> 'a', etc.
                   (char.code (str.head x))))
           (toLower (str.tail x) (str.tail y))))
)
(declare-fun x   () String)
(declare-fun z   () String)
(declare-fun u   () String)
(declare-fun y   () String)
(declare-fun w   () String)
(declare-fun ui   () String)
(declare-fun wi   () String)
(declare-fun i   () Int)
(assert (= ui (str.at u i)))
(assert (= wi (str.at w i)))
(assert (addslashes x u))
(assert (toLower x w))
(assert (or (not (= (str.len u) (str.len w))) (or (or (or (or false (and (str.in.re ui (str.to.re "\x00")) (not (str.in.re wi (str.to.re "\x00"))))) (and (str.in.re ui (str.to.re "\x22")) (not (str.in.re wi (str.to.re "\x22"))))) (and (str.in.re ui (str.to.re "\x5C")) (not (str.in.re wi (str.to.re "\x5C"))))) (and (str.in.re ui (str.to.re "\x27")) (not (str.in.re wi (str.to.re "\x27")))))))
(check-sat)(get-model)