(define-fun-rec toLower ((x String) (y String)) Bool
  (or (and (= x "") (= y ""))
      (and (not (= x "")) (not (= y ""))
           (= (char.code (str.head y))
              (ite (and (<= 65 (char.code (str.head x)))   ; 'A'
                        (<= (char.code (str.head x)) 90)) ; 'Z'
                   (+ (char.code (str.head x)) 32)         ; 'A' -> 'a', etc.
                   (char.code (str.head x))))
           (toLower (str.tail x) (str.tail y))))
)
(define-funs-rec ((trim  ((x String) (y String)) Bool)
                  (tr1  ((x String) (y String)) Bool)
                  (tr2  ((x String) (y String)) Bool)
                  (tr3  ((x String) (y String)) Bool)) (

                  ; definition of trim
                  (or (and (= x "") (= y ""))
                      (and (not (= x "")) 
                      (and (= (str.head x) (char.from-int 32)) ; ' '
                           (trim (str.tail x) y)))
                      (and (not (= x "")) 
                      (and (= (str.head x) (char.from-int 09)) ; '\t'
                           (trim (str.tail x) y)))
                      (and (not (= x ""))
                      (and (= (str.head x) (char.from-int 10)) ; '\n'
                           (trim (str.tail x) y)))
                      (and (not (= x ""))
                      (and (= (str.head x) (char.from-int 13 )) ; '\r'
                           (trim (str.tail x) y)))
                      (and (not (= x ""))
                      (and (= (str.head x) (char.from-int 0  )) ; '\x00'
                           (trim (str.tail x) y)))
                      (and (not (= x ""))
                      (and (= (str.head x) (char.from-int 11 )) ; '\x0B'
                           (trim (str.tail x) y)))
                      (and (not (= x "")) (not (= y ""))
					  (and (= (str.head x) (str.head y))            ; x <=> y
                           (and (not (= (str.head x) (char.from-int 32 )))  ; '\''
                                (not (= (str.head x) (char.from-int 09 )))  ; '"'
                                (not (= (str.head x) (char.from-int 10 )))  ; '\'
                                (not (= (str.head x) (char.from-int 13 )))  ; '\'
                                (not (= (str.head x) (char.from-int 11 )))  ; '\'
                                (not (= (str.head x) (char.from-int 0  )))) ; '\x00'
                           (tr1 (str.tail x) (str.tail y)))))

                  ; definition of tr1
                  (or 
                      (and (= x "") (= y ""))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 32)) ; ' '
                           (= (str.head y) (char.from-int 32)) ; ' '
                           (tr2 (str.tail x) (str.tail y))))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 09)) ; '\t'
                      	   (= (str.head y) (char.from-int 09)) ; '\t'
                           (tr2 (str.tail x) (str.tail y))))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 10)) ; '\n'
                           (= (str.head y) (char.from-int 10)) ; '\n'
                           (tr2 (str.tail x) (str.tail y))))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 13)) ; '\r'
                           (= (str.head y) (char.from-int 13)) ; '\r'
                           (tr2 (str.tail x) (str.tail y))))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 0 )) ; '\x00'
                           (= (str.head y) (char.from-int 0 )) ; '\x00'
                           (tr2 (str.tail x) (str.tail y))))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 11)) ; '\x0B'
                           (= (str.head y) (char.from-int 11)) ; '\x0B'
                           (tr2 (str.tail x) (str.tail y))))
                      (and (not (= x ""))
                      (and (= (str.head x) (char.from-int 32)) ; ' '
                           (tr3 (str.tail x) y)))
                      (and (not (= x ""))
                      (and (= (str.head x) (char.from-int 09)) ; '\t'
                           (tr3 (str.tail x) y)))
                      (and (not (= x ""))
                      (and (= (str.head x) (char.from-int 10)) ; '\n'
                           (tr3 (str.tail x) y)))
                      (and (not (= x ""))
                      (and (= (str.head x) (char.from-int 13 )) ; '\r'
                           (tr3 (str.tail x) y)))
                      (and (not (= x ""))
                      (and (= (str.head x) (char.from-int 0  )) ; '\x00'
                           (tr3 (str.tail x) y)))
                      (and (not (= x ""))
                      (and (= (str.head x) (char.from-int 11 )) ; '\x0B'
                           (tr3 (str.tail x) y)))
                      (and (not (= x "")) (not (= y ""))
					  (and (= (str.head x) (str.head y))            ; x <=> y
                           (and (not (= (str.head x) (char.from-int 32 )))  ; '\''
                                (not (= (str.head x) (char.from-int 09 )))  ; '"'
                                (not (= (str.head x) (char.from-int 10 )))  ; '\'
                                (not (= (str.head x) (char.from-int 13 )))  ; '\'
                                (not (= (str.head x) (char.from-int 11 )))  ; '\'
                                (not (= (str.head x) (char.from-int 0  )))) ; '\x00'
                           (tr1 (str.tail x) (str.tail y)))))

                  ; definition of tr2
                  (or 
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 32)) ; ' '
                           (= (str.head y) (char.from-int 32)) ; ' '
                           (tr2 (str.tail x) (str.tail y))))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 09)) ; '\t'
                      	   (= (str.head y) (char.from-int 09)) ; '\t'
                           (tr2 (str.tail x) (str.tail y))))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 10)) ; '\n'
                           (= (str.head y) (char.from-int 10)) ; '\n'
                           (tr2 (str.tail x) (str.tail y))))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 13)) ; '\r'
                           (= (str.head y) (char.from-int 13)) ; '\r'
                           (tr2 (str.tail x) (str.tail y))))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 0 )) ; '\x00'
                           (= (str.head y) (char.from-int 0 )) ; '\x00'
                           (tr2 (str.tail x) (str.tail y))))
                      (and (not (= x "")) (not (= y ""))
                      (and (= (str.head x) (char.from-int 11)) ; '\x0B'
                           (= (str.head y) (char.from-int 11)) ; '\x0B'
                           (tr2 (str.tail x) (str.tail y))))
                      (and (not (= x "")) (not (= y ""))
					  (and (= (str.head x) (str.head y))            ; x <=> y
                           (and (not (= (str.head x) (char.from-int 32 )))  ; '\''
                                (not (= (str.head x) (char.from-int 09 )))  ; '"'
                                (not (= (str.head x) (char.from-int 10 )))  ; '\'
                                (not (= (str.head x) (char.from-int 13 )))  ; '\'
                                (not (= (str.head x) (char.from-int 11 )))  ; '\'
                                (not (= (str.head x) (char.from-int 0  )))) ; '\x00'
                           (tr1 (str.tail x) (str.tail y)))))

                  ; definition of tr2
                  (or (and (= x "") (= y ""))
                      (and (not (= x "")) 
                      (and (= (str.head x) (char.from-int 32)) ; ' '
                           (tr3 (str.tail x) y)))
                      (and (not (= x "")) 
                      (and (= (str.head x) (char.from-int 09)) ; '\t'
                           (tr3 (str.tail x) y)))
                      (and (not (= x ""))
                      (and (= (str.head x) (char.from-int 10)) ; '\n'
                           (tr3 (str.tail x) y)))
                      (and (not (= x ""))
                      (and (= (str.head x) (char.from-int 13 )) ; '\r'
                           (tr3 (str.tail x) y)))
                      (and (not (= x ""))
                      (and (= (str.head x) (char.from-int 0  )) ; '\x00'
                           (tr3 (str.tail x) y)))
                      (and (not (= x ""))
                      (and (= (str.head x) (char.from-int 11 )) ; '\x0B'
                           (tr3 (str.tail x) y))))
                  )
)
(declare-fun x   () String)
(declare-fun z   () String)
(declare-fun u   () String)
(declare-fun y   () String)
(declare-fun w   () String)
(declare-fun ui   () String)
(declare-fun wi   () String)
(declare-fun i   () Int)
(assert (= ui (str.at u i)))
(assert (= wi (str.at w i)))
(assert (toLower u y))
(assert (trim y w))
(assert (or (not (= (str.len u) (str.len w))) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or false (and (str.in.re ui (str.to.re "\x41")) (not (str.in.re wi (str.to.re "\x41"))))) (and (str.in.re ui (str.to.re "\x42")) (not (str.in.re wi (str.to.re "\x42"))))) (and (str.in.re ui (str.to.re "\x43")) (not (str.in.re wi (str.to.re "\x43"))))) (and (str.in.re ui (str.to.re "\x44")) (not (str.in.re wi (str.to.re "\x44"))))) (and (str.in.re ui (str.to.re "\x45")) (not (str.in.re wi (str.to.re "\x45"))))) (and (str.in.re ui (str.to.re "\x46")) (not (str.in.re wi (str.to.re "\x46"))))) (and (str.in.re ui (str.to.re "\x47")) (not (str.in.re wi (str.to.re "\x47"))))) (and (str.in.re ui (str.to.re "\x48")) (not (str.in.re wi (str.to.re "\x48"))))) (and (str.in.re ui (str.to.re "\x49")) (not (str.in.re wi (str.to.re "\x49"))))) (and (str.in.re ui (str.to.re "\x4A")) (not (str.in.re wi (str.to.re "\x4A"))))) (and (str.in.re ui (str.to.re "\x4B")) (not (str.in.re wi (str.to.re "\x4B"))))) (and (str.in.re ui (str.to.re "\x4C")) (not (str.in.re wi (str.to.re "\x4C"))))) (and (str.in.re ui (str.to.re "\x4D")) (not (str.in.re wi (str.to.re "\x4D"))))) (and (str.in.re ui (str.to.re "\x4E")) (not (str.in.re wi (str.to.re "\x4E"))))) (and (str.in.re ui (str.to.re "\x4F")) (not (str.in.re wi (str.to.re "\x4F"))))) (and (str.in.re ui (str.to.re "\x50")) (not (str.in.re wi (str.to.re "\x50"))))) (and (str.in.re ui (str.to.re "\x51")) (not (str.in.re wi (str.to.re "\x51"))))) (and (str.in.re ui (str.to.re "\x52")) (not (str.in.re wi (str.to.re "\x52"))))) (and (str.in.re ui (str.to.re "\x53")) (not (str.in.re wi (str.to.re "\x53"))))) (and (str.in.re ui (str.to.re "\x54")) (not (str.in.re wi (str.to.re "\x54"))))) (and (str.in.re ui (str.to.re "\x55")) (not (str.in.re wi (str.to.re "\x55"))))) (and (str.in.re ui (str.to.re "\x56")) (not (str.in.re wi (str.to.re "\x56"))))) (and (str.in.re ui (str.to.re "\x57")) (not (str.in.re wi (str.to.re "\x57"))))) (and (str.in.re ui (str.to.re "\x58")) (not (str.in.re wi (str.to.re "\x58"))))) (and (str.in.re ui (str.to.re "\x59")) (not (str.in.re wi (str.to.re "\x59"))))) (and (str.in.re ui (str.to.re "\x5A")) (not (str.in.re wi (str.to.re "\x5A"))))) (and (str.in.re ui (str.to.re "\x61")) (not (str.in.re wi (str.to.re "\x61"))))) (and (str.in.re ui (str.to.re "\x62")) (not (str.in.re wi (str.to.re "\x62"))))) (and (str.in.re ui (str.to.re "\x63")) (not (str.in.re wi (str.to.re "\x63"))))) (and (str.in.re ui (str.to.re "\x64")) (not (str.in.re wi (str.to.re "\x64"))))) (and (str.in.re ui (str.to.re "\x65")) (not (str.in.re wi (str.to.re "\x65"))))) (and (str.in.re ui (str.to.re "\x66")) (not (str.in.re wi (str.to.re "\x66"))))) (and (str.in.re ui (str.to.re "\x67")) (not (str.in.re wi (str.to.re "\x67"))))) (and (str.in.re ui (str.to.re "\x68")) (not (str.in.re wi (str.to.re "\x68"))))) (and (str.in.re ui (str.to.re "\x69")) (not (str.in.re wi (str.to.re "\x69"))))) (and (str.in.re ui (str.to.re "\x6A")) (not (str.in.re wi (str.to.re "\x6A"))))) (and (str.in.re ui (str.to.re "\x6B")) (not (str.in.re wi (str.to.re "\x6B"))))) (and (str.in.re ui (str.to.re "\x6C")) (not (str.in.re wi (str.to.re "\x6C"))))) (and (str.in.re ui (str.to.re "\x6D")) (not (str.in.re wi (str.to.re "\x6D"))))) (and (str.in.re ui (str.to.re "\x6E")) (not (str.in.re wi (str.to.re "\x6E"))))) (and (str.in.re ui (str.to.re "\x6F")) (not (str.in.re wi (str.to.re "\x6F"))))) (and (str.in.re ui (str.to.re "\x70")) (not (str.in.re wi (str.to.re "\x70"))))) (and (str.in.re ui (str.to.re "\x71")) (not (str.in.re wi (str.to.re "\x71"))))) (and (str.in.re ui (str.to.re "\x72")) (not (str.in.re wi (str.to.re "\x72"))))) (and (str.in.re ui (str.to.re "\x73")) (not (str.in.re wi (str.to.re "\x73"))))) (and (str.in.re ui (str.to.re "\x74")) (not (str.in.re wi (str.to.re "\x74"))))) (and (str.in.re ui (str.to.re "\x75")) (not (str.in.re wi (str.to.re "\x75"))))) (and (str.in.re ui (str.to.re "\x76")) (not (str.in.re wi (str.to.re "\x76"))))) (and (str.in.re ui (str.to.re "\x77")) (not (str.in.re wi (str.to.re "\x77"))))) (and (str.in.re ui (str.to.re "\x78")) (not (str.in.re wi (str.to.re "\x78"))))) (and (str.in.re ui (str.to.re "\x79")) (not (str.in.re wi (str.to.re "\x79"))))) (and (str.in.re ui (str.to.re "\x7A")) (not (str.in.re wi (str.to.re "\x7A")))))))
(check-sat)(get-model)